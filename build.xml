<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="valeo" default="default" basedir=".">
    <description>Builds, tests, and runs the project valeo.</description>
    <import file="nbproject/build-impl.xml"/>

    <property file="uk.properties"/>
    <property file="build.properties"/>

    <!--

    There exist several targets which are by default empty and which can be
    used for execution of your tasks. These targets are usually executed
    before and after some main targets. They are:

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-dist:                 called before archive building
      -post-dist:                called after archive building
      -post-clean:               called after cleaning build products
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported
    nbproject/build-impl.xml file.


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are:

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-junit:   defines macro for junit execution
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project
      javadoc-build:          javadoc generation

    Example of overriding the target for project execution could look like

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on
    compile target as regular run target does. Again, for list of available
    properties which you can use check the target you are overriding in
    nbproject/build-impl.xml file.

    -->

    <!-- Regenerate Torque persistent objects, applying local cu-schema-additions.xml -->
    <target name="pre-merge-schemas">
        <!-- Make copy of cu-schema.xml -->
        <echo message="Backing up ${uk.db.schema.file}..."/>
        <copy file="${uk.db.schema.file}" toFile="${schema.backup.file}"/>

        <!-- Convert </database> tag to a comment tag -->
        <replace file="${uk.db.schema.file}" token="&lt;/database>" value="&lt;!-- /database -->"/>

        <!-- Convert </app-data> tag to a comment tag -->
        <replace file="${uk.db.schema.file}" token="&lt;/app-data>" value="&lt;!-- /app-data -->"/>

        <!-- Append cu-schema-additions.xml to cu-schema.xml -->
        <echo message="Merging ${uk.db.schema.file} with ${schema.additions.file}"/>
        <concat append="true" destfile="${uk.db.schema.file}">
            <filelist dir="${db.dir}" files="${schema.additions.name}"/>
        </concat>
    </target>

    <!-- Recreate test database tables, applying local cu-schema-additions.xml -->
    <target name="post-merge-schemas">
        <!-- Restore original cu-schema.xml -->
        <echo message="Restoring original ${uk.db.schema.file}..."/>
        <copy file="${schema.backup.file}" overwrite="true" toFile="${uk.db.schema.file}"/>

        <!-- Remove backup copy of cu-schema.xml -->
        <echo message="Removing ${schema.backup.file}..."/>
        <delete file="${schema.backup.file}"/>
    </target>

    <target name="create-objects">
        <antcall target="pre-merge-schemas"/>

        <echo message="Calling dbms create-objects..."/>
        <ant antfile="build.xml" dir="${uk.root}/uk-common-3.0/webapp" target="dist-torque"/>

        <antcall target="post-merge-schemas"/>
    </target>

    <target name="tomcat-jsp">
        <echo message="Goin' Nuclear"/>
        <copy todir="C:/Tomcat7.0.72/webapps/valeo">
            <fileset dir="web" casesensitive="yes" />
        </copy>
        <copy todir="C:/Tomcat7.0.72/webapps/valeo/channels">
            <fileset dir="web/channels" casesensitive="yes" />
        </copy>
        <copy todir="C:/Tomcat7.0.72/webapps/valeo/admin/">
            <fileset dir="web/admin" casesensitive="yes" />
        </copy>
        <copy todir="C:/Tomcat7.0.72/webapps/valeo/admin/channels">
            <fileset dir="web/admin/channels" casesensitive="yes" />
        </copy>
    </target>

    <target name="tomcat-marlo" depends="dist">
        <echo message="Lame target to help Marlo with Tomcat deploy.  Do not look at this garbage."/>
        <delete dir="C:/Tomcat7.0.72/webapps/valeo"/>
        <copy file="${dist.ear.war}" todir="C:/Tomcat7.0.72/webapps"/>
    </target>

    <target name="tomcat-chrx" depends="dist">
        <echo message="Lame target to help Marlo with Tomcat deploy.  Do not look at this garbage."/>
        <delete dir="/home/marlo/apache-tomcat-8.5.41/webapps/valeo"/>
        <copy file="${dist.ear.war}" todir="/home/marlo/apache-tomcat-8.5.41/webapps"/>
    </target>

    <target name="tomcat-msi" depends="dist">
        <echo message="Lame target to help Marlo with Tomcat deploy.  Do not look at this garbage."/>
        <delete dir="C:/Tomcat7.0.76/webapps/valeo"/>
        <copy file="${dist.ear.war}" todir="C:/Tomcat7.0.76/webapps"/>
    </target>


	<target name="run" depends="tomcat-marlo">
		<echo message="Hello Run!" />
	</target>


</project>
